"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const client_cloudformation_1 = require("@aws-sdk/client-cloudformation");
const client_sts_1 = require("@aws-sdk/client-sts");
const command_1 = require("@oclif/command");
const { fromIni } = require('@aws-sdk/credential-provider-ini');
const fs = require("fs");
const path = require("path");
const axios = require('axios').default;
const unique_names_generator_1 = require("unique-names-generator");
const genConfig = {
    dictionaries: [unique_names_generator_1.adjectives, unique_names_generator_1.colors, unique_names_generator_1.animals],
    separator: '-',
    length: 2,
};
class InitApp extends command_1.Command {
    constructor() {
        super(...arguments);
        this.trace = false;
    }
    authenticated(exit_on_not = true) {
        try {
            const auth = JSON.parse(fs.readFileSync(path.join(this.config.configDir, 'config.json'), 'utf-8'));
            return auth;
        }
        catch (error) {
            this.log(`Unable to find proof of authentication in ${this.config.configDir}.\n\nTry logging in:\n  % cyclic login`);
            if (exit_on_not) {
                this.exit(1);
            }
        }
    }
    async assumeRoleForCredentials(sourceCreds, params) {
        // no idea why we have to implement this ourselves.
        const sts = new client_sts_1.STSClient(sourceCreds);
        const res = await sts.send(new client_sts_1.AssumeRoleCommand(params));
        if (!res.Credentials) {
            throw new Error('Unable to assume role from profile - empty credential object');
        }
        return res.Credentials;
    }
    async bootstrapped(profile = 'default') {
        var _a, _b, _c, _d, _e, _f;
        const logger = this.log;
        const cfn = new client_cloudformation_1.CloudFormationClient({
            // region: REGION, // 'us-east-2'
            credentials: fromIni({
                profile: profile,
                roleAssumer: this.assumeRoleForCredentials,
            }),
        });
        let stack = '';
        logger('* Checking AWS account for bootstrapping stack');
        try {
            const data = await cfn.send(new client_cloudformation_1.DescribeStacksCommand({
                StackName: 'CyclicAppManagementStack',
            }));
            const stacks = (_a = data === null || data === void 0 ? void 0 : data.Stacks) !== null && _a !== void 0 ? _a : [];
            // stacks.forEach((s: Stack) => {
            //   logger(JSON.stringify(s))
            //   logger(JSON.stringify(s.Outputs))
            // })
            stack = (_b = stacks.pop()) !== null && _b !== void 0 ? _b : '';
        }
        catch (error) {
            (this.trace) ? logger(error.stack) : '';
            logger('Unable to find a bootstrap stack.\n\nTry running bootstrap:\n  % cyclic bootstrap');
            this.exit(1);
        }
        if (stack !== '') {
            const bucketName = (_d = (_c = stack.Outputs) === null || _c === void 0 ? void 0 : _c.find(o => o.OutputKey === 'BucketName')) === null || _d === void 0 ? void 0 : _d.OutputValue;
            const roleArn = (_f = (_e = stack.Outputs) === null || _e === void 0 ? void 0 : _e.find(o => o.OutputKey === 'RoleArn')) === null || _f === void 0 ? void 0 : _f.OutputValue;
            // const stackId = stack.StackId
            const stackName = stack.StackName;
            // logger(`  bucketName[${bucketName}]\n  roleArn[${roleArn}]\n  stackId[${stackId}]\n  stackName[${stackName}]`)
            return {
                roleArn: roleArn || '',
                bucketName: bucketName || '',
                stackName: stackName || '',
            };
        }
    }
    async run() {
        var _a, _b, _c, _d;
        const logger = this.log;
        // const {args, flags} = this.parse(InitApp)
        const { flags } = this.parse(InitApp);
        const app_name = (_a = flags.name) !== null && _a !== void 0 ? _a : unique_names_generator_1.uniqueNamesGenerator(genConfig);
        const profile = (_b = flags.profile) !== null && _b !== void 0 ? _b : 'default';
        const api_url = (_c = flags.api) !== null && _c !== void 0 ? _c : 'https://qv7sncm2v7.execute-api.us-east-2.amazonaws.com'; // 'https://api.cyclic.sh/v1'
        this.trace = (_d = flags.debug) !== null && _d !== void 0 ? _d : false;
        // const roleArn = ''
        // const roleSecret = ''
        this.authenticated();
        const res = await this.bootstrapped(profile);
        logger(res === null || res === void 0 ? void 0 : res.roleArn, res === null || res === void 0 ? void 0 : res.bucketName, app_name);
        const creds = JSON.parse(fs.readFileSync(path.join(this.config.configDir, 'config.json'), 'utf-8'));
        logger(JSON.stringify(creds));
        const url = `${api_url}/app`;
        const body = {
            appName: app_name,
            stackName: res === null || res === void 0 ? void 0 : res.stackName,
            roleArn: res === null || res === void 0 ? void 0 : res.roleArn,
            bucketName: res === null || res === void 0 ? void 0 : res.bucketName,
        };
        const opts = {
            headers: { Authorization: `Bearer ${creds === null || creds === void 0 ? void 0 : creds.id_token}` },
        };
        axios.post(url, body, opts)
            .then((res) => {
            var _a;
            logger((_a = res.status) === null || _a === void 0 ? void 0 : _a.toString());
            logger(res.data);
            logger(res.headers);
        })
            .catch((error) => {
            logger(`API end-point error for init-app: url: [${url}] => headers: [${JSON.stringify(opts.headers)}]\nbody:[${JSON.stringify(body)}].`);
            logger(error.message, error.stack);
        });
    }
}
exports.default = InitApp;
InitApp.description = 'Will initialize the an application in the AWS account you are credentialed against.';
InitApp.examples = [
    `$ cyclic init-app --name $APP_NAME --profile $PROFILE
* Checking AWS account for bootstrapping
* Checking AWS account for required roles
* Creating Cyclic App: $APP_NAME
* Provisioning AWS pipeline resources
`,
];
InitApp.flags = {
    help: command_1.flags.help({ char: 'h' }),
    // flag with a value (-n, --name=VALUE)
    name: command_1.flags.string({ char: 'n', description: 'application name (defaults to random words)' }),
    profile: command_1.flags.string({ char: 'p', description: 'aws credential profile (defaults to default)' }),
    api: command_1.flags.string({ char: 'a', description: 'url to base of cyclic api for requests (default https://api.cyclic.sh/v1)' }),
    debug: command_1.flags.boolean({ char: 'd', description: 'print debugging output' }),
};
// static args = [{name: '-n awesome-app-name'}]
InitApp.args = [];
//# sourceMappingURL=init-app.js.map