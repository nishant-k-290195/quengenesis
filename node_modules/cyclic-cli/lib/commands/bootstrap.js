"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const client_cloudformation_1 = require("@aws-sdk/client-cloudformation");
const command_1 = require("@oclif/command");
const { fromIni } = require('@aws-sdk/credential-provider-ini');
const fs = require("fs");
const path = require("path");
class Bootstrap extends command_1.Command {
    async run() {
        var _a, _b, _c;
        const logger = this.log;
        const { flags } = this.parse(Bootstrap);
        const profile = (_a = flags.profile) !== null && _a !== void 0 ? _a : 'default';
        const cfn = new client_cloudformation_1.CloudFormationClient({
            // region: REGION, // 'us-east-2'
            credentials: fromIni({ profile: profile }),
        });
        let exists = true;
        logger('* Checking AWS account for bootstrapping');
        try {
            const data = await cfn.send(new client_cloudformation_1.DescribeStacksCommand({
                StackName: Bootstrap.stackName,
            }));
            logger(JSON.stringify((_c = (_b = data.Stacks) === null || _b === void 0 ? void 0 : _b.pop()) === null || _c === void 0 ? void 0 : _c.Outputs));
        }
        catch (error) {
            // const { requestId, cfId, extendedRequestId } = error.$metadata;
            // console.log({ requestId, cfId, extendedRequestId });
            // logger(error) <- This is expected if the stack doesn't exist
            exists = false;
        }
        const nowInMs = Date.now();
        const templateBody = fs.readFileSync(path.join(__dirname, '/bootstrap-template.yaml'), 'utf-8');
        const packageVersion = require('../../package.json').version;
        const changeSet = await cfn.send(new client_cloudformation_1.CreateChangeSetCommand({
            ChangeSetName: `ChangeSetAsOf-${nowInMs}`,
            StackName: Bootstrap.stackName,
            Capabilities: ['CAPABILITY_NAMED_IAM'],
            ChangeSetType: (exists) ? 'UPDATE' : 'CREATE',
            Description: `Cyclic Apps Bootstrap stack with latest and greatest as of: ${nowInMs}`,
            NotificationARNs: [Bootstrap.notificationArn],
            Parameters: [
                { ParameterKey: 'BootstrapVersion', ParameterValue: `v${packageVersion}` },
            ],
            Tags: [
                { Key: 'cyclic.source', Value: `cli:v${packageVersion}` },
            ],
            TemplateBody: templateBody,
        }));
        logger(JSON.stringify(changeSet));
        setTimeout(async () => {
            const execChangeSetResult = await cfn.send(new client_cloudformation_1.ExecuteChangeSetCommand({
                ChangeSetName: changeSet.Id,
            }));
            logger(JSON.stringify(execChangeSetResult));
        }, 3000); // TODO probably wanna check that the change set is ready
    }
}
exports.default = Bootstrap;
Bootstrap.stackName = 'CyclicAppManagementStack';
Bootstrap.notificationArn = 'arn:aws:sns:us-east-2:758562997317:test-cloudformation-notification';
Bootstrap.description = `Will create ${Bootstrap.stackName} stack in your AWS account.`;
Bootstrap.examples = [
    `$ cyclic bootstrap --profile $PROFILE
* Checking AWS account for bootstrapping
* Creating CfN stack: ${Bootstrap.stackName}
* Provisioning ...
`,
];
Bootstrap.flags = {
    help: command_1.flags.help({ char: 'h' }),
    profile: command_1.flags.string({ char: 'p', description: 'aws credential profile (defaults to default)' }),
};
Bootstrap.args = [];
//# sourceMappingURL=bootstrap.js.map